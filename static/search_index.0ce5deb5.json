[{"id":0,"title":"api","content":"#","routePath":"/PTSD-introduction/api","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"Core::Context","content":"#\n\n\nCore::Context::Context()#\n\n * Type: Constructor\n * Reture: None\n * DESCRIPTION: Initialize context for SDL, OpenGL, and create a window.\n\n\nCore::Context::GetExit()#\n\n * Reture: Boolean\n * Description`:\n\n\nCore::Context::GetWindowWidth()#\n\n * Reture: unsigned int\n * Description:\n\n\nCore::Context::GetWindowHeight()#\n\n * Reture: unsigned int\n * Description:\n\n\nCore:Context::SetExit(bool)#\n\n * Return: void\n * Description:\n\n\nCore:Context::SetWindowWidth(unsigned int)#\n\n * Return: void\n * Description:\n\n\nCore::Context::SetWindowHeight(unsigned int)#\n\n * Return: void\n * Description:\n\n\nCore::Context::Update()#\n\n * Return: void\n * Description:\n\n\nsource code#\n\n","routePath":"/PTSD-introduction/api/core/Context","lang":"","toc":[{"text":"Core::Context::Context()","id":"corecontextcontext","depth":2,"charIndex":3},{"text":"Core::Context::GetExit()","id":"corecontextgetexit","depth":2,"charIndex":142},{"text":"Core::Context::GetWindowWidth()","id":"corecontextgetwindowwidth","depth":2,"charIndex":207},{"text":"Core::Context::GetWindowHeight()","id":"corecontextgetwindowheight","depth":2,"charIndex":283},{"text":"Core:Context::SetExit(bool)","id":"corecontextsetexitbool","depth":2,"charIndex":360},{"text":"Core:Context::SetWindowWidth(unsigned int)","id":"corecontextsetwindowwidthunsigned-int","depth":2,"charIndex":424},{"text":"Core::Context::SetWindowHeight(unsigned int)","id":"corecontextsetwindowheightunsigned-int","depth":2,"charIndex":503},{"text":"Core::Context::Update()","id":"corecontextupdate","depth":2,"charIndex":584},{"text":"source code","id":"source-code","depth":2,"charIndex":644}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"Overview","content":"#\n\n此 API，並不同步於 PTSD，且目前將不持訊更新。","routePath":"/PTSD-introduction/api/","lang":"","toc":[],"domain":"","frontmatter":{"overview":true},"version":""},{"id":3,"title":"Markdown & MDX","content":"#\n\nRspress supports not only Markdown but also MDX, a powerful way to develop\ncontent.\n\n\nMarkdown#\n\nMDX is a superset of Markdown, which means you can write Markdown files as\nusual. For example:\n\n\n\n\nUse Component#\n\nWhen you want to use React components in Markdown files, you should name your\nfiles with .mdx extension. For example:\n\n\n\n\nFront Matter#\n\nYou can add Front Matter at the beginning of your Markdown file, which is a\nYAML-formatted object that defines some metadata. For example:\n\n\n\n> Note: By default, Rspress uses h1 headings as html headings.\n\nYou can also access properties defined in Front Matter in the body, for example:\n\n\n\nThe previously defined properties will be passed to the component as frontmatter\nproperties. So the final output will be:\n\n\n\n\nCustom Container#\n\nYou can use the ::: syntax to create custom containers and support custom\ntitles. For example:\n\nInput:\n\n\n\nOutput:\n\nTIP\n\nThis is a block of type tip\n\nINFO\n\nThis is a block of type info\n\nWARNING\n\nThis is a block of type warning\n\nDANGER\n\nThis is a block of type danger\n\nDETAILS\n\nThis is a block of type details\n\nCustom Title\n\nThis is a block of Custom Title\n\nCustom Title\n\nThis is a block of Custom Title\n\n\nCode Block#\n\n\nBasic Usage#\n\nYou can use the ``` syntax to create code blocks and support custom titles. For\nexample:\n\nInput:\n\n\n\nOutput:\n\n\n\n\n\n\nShow Line Numbers#\n\nIf you want to display line numbers, you can enable the showLineNumbers option\nin the config file:\n\n\n\n\nWrap Code#\n\nIf you want to wrap long code line by default, you can enable the\ndefaultWrapCode option in the config file:\n\n\n\n\nLine Highlighting#\n\nYou can also apply line highlighting and code block title at the same time, for\nexample:\n\nInput:\n\n\n\nOuput:\n\n\n\n\nRustify MDX compiler#\n\nYou can enable Rustify MDX compiler by following config:","routePath":"/PTSD-introduction/api/prev_index","lang":"","toc":[{"text":"Markdown","id":"markdown","depth":2,"charIndex":88},{"text":"Use Component","id":"use-component","depth":2,"charIndex":198},{"text":"Front Matter","id":"front-matter","depth":2,"charIndex":336},{"text":"Custom Container","id":"custom-container","depth":2,"charIndex":767},{"text":"Code Block","id":"code-block","depth":2,"charIndex":1190},{"text":"Basic Usage","id":"basic-usage","depth":3,"charIndex":1204},{"text":"Show Line Numbers","id":"show-line-numbers","depth":3,"charIndex":1332},{"text":"Wrap Code","id":"wrap-code","depth":3,"charIndex":1455},{"text":"Line Highlighting","id":"line-highlighting","depth":3,"charIndex":1580},{"text":"Rustify MDX compiler","id":"rustify-mdx-compiler","depth":2,"charIndex":1711}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"hello world","content":"#\n\n","routePath":"/PTSD-introduction/api/prev_prev_index","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"Clion","content":"#\n\n首先先把 PTSD 下載下來。\n\n\n\n之後在 Clion 中將它開啟，點擊 PTSD。\n\n出現了一個設定 Cmake 的畫面，而這邊開始展現下一步大法...\n\n或需你會發現右上角的 RUN 或者 DEBUG 按鈕是不能按的狀態，這是因為 Clion 正在編譯 Cmake，你可以在右下角看到有一個進度條。\n\n這邊點擊右上角的 RUN Button，此刻你就能看到他正在連結每一個檔案了，讓他跑一下。\n\n\n\n等他跑完之後就會出現一隻可愛的貓貓，至此就完成了整個專案的調整。\n\n\n\n恭喜你，已經完成整個 PTSD 的下載了，可以開始編寫屬於你自己的遊戲了。","routePath":"/PTSD-introduction/guide/Clion","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"Giraffe Adventure","content":"#\n\n * Download\n\n\n敘述內容#\n\n這是一個基於 PTSD 框架所打造的一個小小練習課程，主要目的為提供 OOPL2024F(物件導向實習) 的學生練習。\n\n\n如何安裝#\n\n 1. 下載此專案\n\n\n\n\n配置設定 (可選)#\n\n以下的 config.hpp 都在此路徑上：PTSD/include/config.hpp\n\n * 調整 config.hpp 當中的 寬 與 高，並設定為數值 601。\n\n * 調整 config.hpp 當中的幀率 (一秒內螢幕更新的次數) ，預設為 60 fps。\n\n * 調整 config.hpp 你想要的遊戲名稱。\n\n\n任務#\n\n * 把在這個練習檔案裡面 (你必須自行尋找)，會出現一個物件名稱 m_giraffe，並且將該物件名稱的路徑變更為 Rescoures 資料夾底下的\n   giraffe.png。\n\n * 想一想，如何使用鍵盤控制一隻該死的長頸鹿到紅色框框內。PS: 可以透過提供的 API 來查詢觸發鍵盤的條件。\n\n * 今天，長頸鹿肚子餓了，而眾所周知長頸鹿最愛吃寶箱了。所以你必須讓長頸鹿碰觸到寶箱時，寶箱就會被消失。\n\n * 蜜蜂是我們的好朋友，而你 我的朋友 寫一個程式讓蜜蜂動起來吧! 觀察一下各個文件的呼叫，試試看新增或者修改哪些 method 能讓蜜蜂動起來~\n\n * 那該死的長頸鹿又餓了，因此他必須從每一扇門後面看看可憐的寶箱有沒有在裡面。你的任務是，當長頸鹿走過每一扇門後... 那扇門就要開啟。至此才算完成這一關卡。\n\n * Design a program to countdown, stop animation after OK display.\n\nHint: 當你在上述某一項任務卡住的時候，多多看看每一份程式檔案。裡面會有一些長頸鹿拉下來的一坨提示 TODO: ......，去發現它吧!\n帶領著長頸鹿成為海賊王#\n\n--------------------------------------------------------------------------------\n\n\n教學#\n\n\n任務一#\n\n在這個練習檔案裡面 (你必須自行尋找)，會出現一個物件名稱 m_giraffe，並且將該物件名稱的路徑變更為 Rescoures 資料夾底下的\ngiraffe.png。\n\n首先你會看到一個灰色的格子，而我們只需要把灰色的盒子路徑，更改成長頸鹿的圖片路徑就可以。\n\n\n\n下面是更改後的結果。\n\n\n\n\n任務二#\n\n\n\n接下來，我們需要讓長頸鹿可以移動。因此需要做到兩件事情，偵測鍵盤的觸發與觸發後的動作。觀察一下API會發現Uil::Input::IsKeyPressed專門用\n來偵測鍵盤的觸發。而Uil::Keycode::{鍵盤按鍵}可以用來偵測指定的按鍵觸發，當觸發之後長頸鹿就應該要移動了。\n\n移動的方法非常的的簡單，先獲取當前長頸鹿的圖片位置，當按鍵觸發之後，在將圖片位置加上偏移量，最後在更新一下長頸鹿的位置，此時你就會驚喜的發現，長頸鹿能移動了。\n\n\n\n\n任務三#\n\n此任務要實作偵測長頸鹿與寶箱的偵測，而此地方的邏輯也並不困難。首先我們先比對寶箱與長頸鹿的位置，如果他們各自的 x 與 y 是相同的，那麼碰撞就是正在發生的了。\n\n\n\n而根據題目說，如果長頸鹿撞到寶箱的話，那麼寶箱就會消失。\n\n\n\n\n任務四#\n\n讓小蜜蜂動起來。SetLooping 代表著如果有動畫的話，那是否動畫會一直重播，如果否的話就只會播一次。Play 代表著讓動畫動起來。\n\n\n\n設定完成之後就能使用他了。\n\n\n\n\n任務五#\n\n","routePath":"/PTSD-introduction/guide/Practice/Giraffe_Adventure","lang":"","toc":[{"text":"敘述內容","id":"敘述內容","depth":2,"charIndex":16},{"text":"如何安裝","id":"如何安裝","depth":2,"charIndex":85},{"text":"配置設定 (可選)","id":"配置設定-可選","depth":2,"charIndex":106},{"text":"任務","id":"任務","depth":2,"charIndex":284},{"text":"教學","id":"教學","depth":2,"charIndex":891},{"text":"任務一","id":"任務一","depth":3,"charIndex":897},{"text":"任務二","id":"任務二","depth":3,"charIndex":1052},{"text":"任務三","id":"任務三","depth":3,"charIndex":1287},{"text":"任務四","id":"任務四","depth":3,"charIndex":1410},{"text":"任務五","id":"任務五","depth":3,"charIndex":1506}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"Quick Start","content":"#\n\n\nRequired#\n\n\n\n\nDownload file#\n\n\n\n\n\n\nIDE#\n\n * VScode\n * Clion\n * Neovim","routePath":"/PTSD-introduction/guide/","lang":"","toc":[{"text":"Required","id":"required","depth":2,"charIndex":3},{"text":"Download file","id":"download-file","depth":2,"charIndex":17},{"text":"IDE","id":"ide","depth":2,"charIndex":38}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"VScode","content":"#\n\n先把 PTSD 下載下來。\n\n\n\n之後用 vscode 打開它。\n\n\n\n安裝 Cmake。\n\n\n\n哈哈，其實我也沒裝 cmake 拉。\n\n選擇編譯器，而操作的電腦是 MAC 所以就選擇了 Clang。\n\n\n\n可以看到他正在編譯。\n\n接下來提示說已經編譯完成，且編譯完成的檔案在 build 資料夾。接下來你有看到 vscode 左下角有一個播放鍵，那是 cmake 的執行按鈕，按下去之後選擇\nsimple，再來你就會看到貓貓了。\n\n\n\nwtf, 這畫面超ㄎㄧㄤ的 ww。","routePath":"/PTSD-introduction/guide/vscode","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"Hello World!","content":"#\n\n\nStart#\n\nWrite something to build your own docs! 🎁","routePath":"/PTSD-introduction/hello","lang":"","toc":[{"text":"Start","id":"start","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""}]